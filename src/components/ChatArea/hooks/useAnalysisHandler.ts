// src/components/ChatArea/hooks/useAnalysisHandler.ts
import { getActionTitle } from '../utils';

/**
 * Hook para gerenciar opera√ß√µes de an√°lise de documentos
 * 
 * **Melhorias:**
 * - Separa√ß√£o de responsabilidade: apenas l√≥gica de an√°lise
 * - Reutiliz√°vel: pode ser usado em diferentes contextos
 * - Testabilidade: l√≥gica de an√°lise isolada e test√°vel
 * - Error handling: tratamento centralizado de erros
 */
export function useAnalysisHandler() {
  // Mock function to simulate backend response (remove this when going to production)
  const mockAnalyzeDocument = async (promptKey: string): Promise<string> => {
    // Simulate ~12 seconds backend processing time
    await new Promise(resolve => setTimeout(resolve, 120000));
    
    const mockResponses = {
      'complete_analysis': `## An√°lise Completa do Documento

**Resumo Executivo:**
Este documento apresenta aspectos jur√≠dicos relevantes que foram analisados detalhadamente. A an√°lise identificou pontos de aten√ß√£o importantes para considera√ß√£o.

**Principais Conclus√µes:**
‚Ä¢ O documento est√° estruturado de forma adequada
‚Ä¢ Existem cl√°usulas que merecem aten√ß√£o especial
‚Ä¢ Recomenda-se revis√£o de alguns termos espec√≠ficos

**Recomenda√ß√µes:**
1. Revisar as cl√°usulas contratuais mencionadas
2. Verificar conformidade com a legisla√ß√£o atual
3. Considerar ajustes nos termos identificados

*Esta √© uma an√°lise mockada para fins de demonstra√ß√£o.*`,

      'risk_analysis': `## An√°lise de Riscos Jur√≠dicos

**N√≠vel de Risco: M√âDIO**

**Riscos Identificados:**
üî¥ **Alto Risco:**
‚Ä¢ Cl√°usulas com reda√ß√£o amb√≠gua que podem gerar interpreta√ß√µes conflitantes

üü° **M√©dio Risco:**
‚Ä¢ Termos que podem n√£o estar alinhados com regulamenta√ß√£o recente
‚Ä¢ Aus√™ncia de algumas prote√ß√µes contratuais recomendadas

üü¢ **Baixo Risco:**
‚Ä¢ Estrutura geral do documento adequada
‚Ä¢ Aspectos formais em conformidade

**Mitiga√ß√£o Sugerida:**
- Esclarecer reda√ß√£o das cl√°usulas amb√≠guas
- Atualizar termos conforme legisla√ß√£o vigente
- Incluir cl√°usulas de prote√ß√£o adicionais

*Esta √© uma an√°lise mockada para fins de demonstra√ß√£o.*`,

      'jurisprudence_search': `## Busca Jurisprudencial

**Precedentes Encontrados:**

**STJ - Superior Tribunal de Justi√ßa**
‚Ä¢ REsp n¬∫ 1.234.567/SP - Caso similar com interpreta√ß√£o favor√°vel
‚Ä¢ AgInt no AREsp n¬∫ 987.654/RJ - Precedente relevante sobre o tema

**TJSP - Tribunal de Justi√ßa de S√£o Paulo**
‚Ä¢ Apela√ß√£o n¬∫ 1234567-89.2020.8.26.0100 - Jurisprud√™ncia consolidada
‚Ä¢ AI n¬∫ 9876543-21.2021.8.26.0000 - Entendimento recente

**S√∫mulas Aplic√°veis:**
‚Ä¢ S√∫mula 123 do STJ: "Entendimento consolidado sobre a mat√©ria..."
‚Ä¢ S√∫mula 456 do STF: "Interpreta√ß√£o constitucional relevante..."

**An√°lise dos Precedentes:**
A jurisprud√™ncia demonstra tend√™ncia favor√°vel √† interpreta√ß√£o que beneficia a parte contratante, especialmente nos casos mais recentes.

*Esta √© uma an√°lise mockada para fins de demonstra√ß√£o.*`
    };

    return mockResponses[promptKey as keyof typeof mockResponses] || 
           `An√°lise realizada com sucesso para: ${promptKey}\n\nEsta √© uma resposta mockada do sistema de an√°lise jur√≠dica. O documento foi processado e analisado conforme solicitado.\n\n*Esta √© uma an√°lise mockada para fins de demonstra√ß√£o.*`;
  };

  // Analysis request handler with loading steps and mock response
  const handleAnalysisRequest = async (
    promptKey: string,
    params: {
      currentFile: File | null;
      usedAnalyses: Set<string>;
      isSubmitting: boolean;
      setIsSubmitting: (value: boolean) => void;
      setLoadingStep: (step: number) => void;
      addMessage: (content: string, isUser?: boolean) => void;
      setUsedAnalyses: (updater: (prev: Set<string>) => Set<string>) => void;
      setChatStarted: (started: boolean) => void;
      chatStarted: boolean;
    }
  ) => {
    const {
      currentFile,
      usedAnalyses,
      isSubmitting,
      setIsSubmitting,
      setLoadingStep,
      addMessage,
      setUsedAnalyses,
      setChatStarted,
      chatStarted
    } = params;

    if (!currentFile || usedAnalyses.has(promptKey) || isSubmitting) return;

    setIsSubmitting(true);
    setLoadingStep(1);
    const actionTitle = getActionTitle(promptKey);
    
    // Add user message
    addMessage(`${actionTitle} do documento`, true);

    // Simulate progressive steps during analysis with slower timing for better visual feedback
    setTimeout(() => setLoadingStep(2), 3000);
    setTimeout(() => setLoadingStep(3), 5500);

    try {
      // MOCK: Using mock function instead of real API to avoid costs during development
      // To restore real API: uncomment import, uncomment lines below, remove mockAnalyzeDocument
      // const response = await analyzeDocument({
      //   file: currentFile,
      //   promptType: promptKey,
      // });
      // const formattedResponse = formatAnalysisResponse(response);
      
      const mockResponse = await mockAnalyzeDocument(promptKey);
      addMessage(mockResponse, false);
      
      setUsedAnalyses(prev => new Set([...prev, promptKey]));
      
      if (!chatStarted) {
        setChatStarted(true);
      }
    } catch (error) {
      console.error('Erro durante a an√°lise:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      addMessage(`Erro: ${errorMessage}. Tente novamente.`, false);
    } finally {
      setIsSubmitting(false);
      setLoadingStep(1); // Reset for next analysis
    }
  };

  return {
    handleAnalysisRequest,
    mockAnalyzeDocument, // Export for potential reuse
  };
}
